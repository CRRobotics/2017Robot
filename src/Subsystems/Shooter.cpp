// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "CANTalon.h"
#include "Robot.h"
#include "Shooter.h"
#include "../RobotMap.h"

#define SHOOTER_ACCEPTABLE_ERROR 50

Shooter::Shooter() : Subsystem("Shooter") {
    flywheel = RobotMap::shooterflywheel;
    angleShift = RobotMap::shooterangleShift;
}

void Shooter::InitDefaultCommand() {

}


void Shooter::RunFlywheel(double speed){
	flywheel->Set(speed);
	if (speed == 0) 
		isRunning = false;
	else
		isRunning = true;
}

void Shooter::ChangeControlMode(CANTalon::ControlMode cMode){
	flywheel->SetControlMode(cMode);
	if (Robot::tMode == Robot::TestMode::SHOOTER_SPEED)
	{
		shootP = frc::SmartDashboard::GetNumber("test_pCons", 0.0);
		shootI = frc::SmartDashboard::GetNumber("test_iCons", 0.0);
		shootD = frc::SmartDashboard::GetNumber("test_dCons", 0.0);
		shootF = frc::SmartDashboard::GetNumber("test_fCons", 0.0);
	}
	if (cMode == CANTalon::ControlMode::kSpeed)
	{
		flywheel->SetPID(shootP, shootI, shootD, shootF);
	}
}

double Shooter::GetFlywheelSpeed(){
	return flywheel->GetEncVel();
}

bool Shooter::UpToSpeed(){
	return abs(flywheel->GetClosedLoopError()) < SHOOTER_ACCEPTABLE_ERROR;
}

bool Shooter::IsRunning()
{
	return isRunning;
}

void Shooter::SetGatePosition(bool pos) {
	RobotMap::leftGate->Set(pos);
	RobotMap::rightGate->Set(pos);
}

void Shooter::SetRGatePosition(bool pos) {
	RobotMap::rightGate->Set(pos);
}

void Shooter::SetLGatePosition(bool pos) {
	RobotMap::leftGate->Set(pos);
}

void Shooter::SetAngle(bool high){
	angleShift->Set(high);
}


// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "LEDRefresh.h"
#include "../../Subsystems/LEDs.h"
#define DESIRED_INTERVAL 5000
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

LEDRefresh::LEDRefresh(): Command() {
	Requires(Robot::leds.get());
	SmartDashboard::PutNumber("led_interval_ms", 0.0);
}


// Called just before this Command runs the first time
void LEDRefresh::Initialize() {
	for(int i = 0; i < 88; i++){
		//(*Robot::leds->colors)[i].r = 0x10;
	}
	last_time = std::chrono::system_clock::now().time_since_epoch().count() * 1000 * std::chrono::system_clock::period::num / std::chrono::system_clock::period::den;
	Robot::leds->ChangeMode(LEDs::LEDMode::YELLOW);
}

// Called repeatedly when this Command is scheduled to run
void LEDRefresh::Execute() {
	if (Robot::oi->GetDrivePTOOn())
		Robot::leds->ChangeMode(LEDs::LEDMode::GREEN_BLINK);
	if (Robot::oi->GetDrivePTOOff())
		Robot::leds->ChangeMode(LEDs::LEDMode::PATRIOTIC);
	long current_time = std::chrono::system_clock::now().time_since_epoch().count() * 1000 * std::chrono::system_clock::period::num / std::chrono::system_clock::period::den;
	if (current_time - last_time > SmartDashboard::GetNumber("led_interval_ms", 5000.0))
	{
		Robot::leds->Refresh();
		last_time = current_time;
	}
}

// Make this return true when this Command no longer needs to run execute()
bool LEDRefresh::IsFinished() {
    return false;
}

// Called once after isFinished returns true
void LEDRefresh::End() {
	SmartDashboard::PutBoolean("LED RUNNING", false);
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void LEDRefresh::Interrupted() {
	SmartDashboard::PutBoolean("LED RUNNING", false);
}
